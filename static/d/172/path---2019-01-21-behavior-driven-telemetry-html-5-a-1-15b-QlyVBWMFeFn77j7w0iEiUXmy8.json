{"data":{"site":{"siteMetadata":{"title":"Ashish Dubey's Blog","author":"Ashish Dubey"}},"markdownRemark":{"id":"ecbc88a6-88ce-581c-8acd-07c05c458ac4","excerpt":"Problem Background We need telemetry at different levels like business, application and infrastructure to be able to monitor overall health of the product…","html":"<h1>Problem Background</h1>\n<p>We need telemetry at different levels like business, application and infrastructure to be able to monitor overall health of the product. Being able to efficiently monitor the health of the product also gives us confidence in releasing new things, because if something bad happens, we’re able to detect it before our users start crying. Let’s look at what all these levels of information are -</p>\n<h2>Business/Product</h2>\n<p>Events that help observing the user flows, like cart checkouts, user sign-ups, payment failures, setc</p>\n<h2>Application</h2>\n<p>Code level events that are involved in a user flow (happy or sad). These events include application logs, runtime exceptions, latencies, etc</p>\n<h2>Infrastructure</h2>\n<p>Measurements of infrastructure level attributes like CPU load, memory and disk usage. Pending security updates, etc</p>\n<p>If we make sure we cover all of this data for a given user flow, then we should be able to find the root cause of any failure in the user flow. This is hard right now because there are gaps at one or more layers of telemetry. These gaps are mostly because of the lack of a standardized approach to telemetry. Major gaps -</p>\n<ol>\n<li>\n<p>There is a no process to defining product events. These are at the perusal of product managers right now. Usually these events (in GA/snowplow/localytics) are thought of by product managers if they think they’re going to be useful. There are multiple problems happening here -</p>\n<p>a. There is no track of all implemented events</p>\n<p>b. We can’t track coverage of events as in at any given point in time we can’t say that all over user behaviors have corresponding events flowing to our analytics platform</p>\n<p>c. We can miss critical events for product flows we care about the most</p>\n</li>\n<li>\n<p>Same gap lies in defining application events. More so, with so many components, it’s increasingly difficult to figure out what to log and track.</p>\n<p>a. To read application logs and infer something out of them is hard for even people who work on that application usually because some event critical in a particular user flow isn’t covered.</p>\n<p>b. Inference is almost impossible for someone who hasn’t worked on the application, because there is no standard schema or requirements of the log messages.</p>\n</li>\n<li>\n<p>We log so much on the infrastructure layer, that sometimes it’s just noise. Often infrastructure layer metrics are the only ones that alarm the service owners, whereas only a handful of them should be actionable. Most of the infrastructure metrics should be used for investigation and not alerting.\nBehavior Driven Telemetry</p>\n</li>\n</ol>\n<p>The teams who follow agile and BDD approach to testing might find it a really effective approach to testing out the most critical product flows. If we think of telemetry as a way of ensuring post-production product health, we can use the BDD approach to make sure we have the telemetry for the most important flows.</p>\n<p>Example:</p>\n<p>Consider the following BDD test case written with the involvement of a PO, dev and QA -</p>\n<p>@manual @shallow @e2e.android @UI @productEvent\nScenario Outline: Verify mylist for loyal users\n\"\"\"\nMylist should be present on both feed page and nav drawer.\n\"\"\"\nGiven User is loyal user\nAnd User has no live order present\nWhen User navigates to <page>\nThen User should be able to access mylist</p>\n<p>Given user is &#x3C;user properties, eg. loyal, old>\nAnd user has &#x3C;current state, eg. logged in, empty cart, no live order, city etc.>\nWhen user  &#x3C;action, eg. views product details, visits feed, searches, adds product to cart>\nThen user should be able to see <object eg. product_list_item></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Examples:\n  | page              |\n  | Feed page         |\n  | navigation drawer |</code></pre></div>\n<p>Before we proceed, we should reiterate a little, we won’t be writing a test case for this behavior but we’ll be using this behavior to define tracking, logging and instrumentation that we need to ensure in our application.</p>\n<p>Business/product event -\nA GA event that tracks display of the my list. (product level) with attributes containing information about where is the MyList triggered from</p>\n<p>Example GA event:\nEvent Category = MyList\nAction = Displayed\nLabel = Feed</p>\n<p>Application Logging -\nAn application log generated when the my list items are sent from the backend or when they’re shown in the app. Maybe the backend can log the number of items or the actual list of items sent to the client (application level).</p>\n<p>Example log in ELK:\n{‘event’: ‘mylistshown’, items: […items], userId: 23234, city: Gurugram, ….}</p>\n<p>Infrastructure\nAll instrumentation that happens on infrastructure running the backend service powering the my list feature.\nAssume My List feature is powered by /mylist API which is part of consumer API and it runs on instances i1, i2, i3</p>\n<p>We make sure we’re sending CPU load, memory and disk usage collected by collectd to InfluxDB so that we can check the metrics on Grafana if something is off or maybe get alerted on one of these metrics (by now you have enough higher level events/metrics being captured so chances are you shouldn’t do this but they should be at your disposal).</p>\n<p>More Possibilities</p>\n<p>Telemetry coverage\nIf we start tagging behaviors which has telemetry built at all levels, there is a bunch of things we gain with it -</p>\n<ol>\n<li>\n<p>It’s easy to generate documentation of all telemetry. This is especially helpful for product managers/analysts looking for events to build product insight.</p>\n</li>\n<li>\n<p>It’s easy to trace backwards and find out cases for which you don’t have telemetry built</p>\n</li>\n<li>\n<p>It’s also easy to write automated tests for telemetry, which is one of the problems we face right now. Currently all events are tested manually.</p>\n</li>\n</ol>","frontmatter":{"title":"Behavior Driven Telemetry","date":"January 21, 2019"}}},"pageContext":{"slug":"/2019/01/21/behavior-driven-telemetry.html","previous":{"fields":{"slug":"/2018/11/18/generative-music.html"},"frontmatter":{"title":"An amateur quest to generative music"}},"next":null}}