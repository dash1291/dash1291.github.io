{"data":{"site":{"siteMetadata":{"title":"Ashish Dubey's Blog","author":"Ashish Dubey"}},"markdownRemark":{"id":"7595dde5-e07d-569e-aa0e-09005ed52759","excerpt":"I wanted to integrate Facebook’s authentication with my WordPress site’s user login system. This had led me stuck for a couple of days because of all the…","html":"<p>I wanted to integrate Facebook’s authentication with my WordPress site’s user login system. This had led me stuck for a couple of days because of all the authentication routes that I’ve known in WordPress would require a correct password to complete authentication. But, in my case, I just needed to authenticate a user without actually user providing a password. That means, I needed a method by which I could authenticate users using just their username or user ID. So after a lot of hacking and reading, I finally found this method that works out for me.\nIt basically deals with using filters, precisely <code class=\"language-text\">authenticate</code> filter. The functions added to this filter are executed in <code class=\"language-text\">wp_authenticate</code> function which is defined in <code class=\"language-text\">pluggable.php</code> and is the authentication end point in WordPress. If you watch the code in <code class=\"language-text\">user.php</code>, there you would find that two functions added to this <code class=\"language-text\">authenticate</code> filter, which are <code class=\"language-text\">wp_authenticate_username_password</code> with priority 20 and <code class=\"language-text\">wp_authenticate_cookie</code> with priority 30. <code class=\"language-text\">wp_authenticate_cookie</code> is not that we want to care about. <code class=\"language-text\">It&#39;s wp_authenticate_username_password</code> that we need to deal with. So when you want to bypass this username and password combined authentication you basically need to bypass the execution of this function and return the user before it. So we’ll hook our own method to this filter with a priority less than 20 by the following line of code.</p>\n<pre class=\"php\">\nadd_filter('authenticate','forceLogin',0,3);\n</pre>\n<p>Now suppose you want to define an authentication that doesn’t really need a password, just write a function <code class=\"language-text\">forceLogin()</code> like the following.</p>\n<pre class=\"php\">\nfunction forceLogin($user,$username,$password)\n{\n  if(username_exists($username))\n  {\n    $user=get_user_by('login',$username);\n    remove_action('authenticate', 'wp_authenticate_username_password', 20);\n    return $user;\n  }\n}\n</pre>\n<p>Thats it, now when you call the <code class=\"language-text\">wp_signon()</code> with just a username in the credentials, the user with the username in the credentials will be authenticated without actually requiring the password. Thats how its done. One can integrate OAuth and construct customized logins for their WordPress websites.</p>","frontmatter":{"title":"Customized authentication for WordPress users","date":"June 17, 2011"}}},"pageContext":{"slug":"/2011/06/17/custom-auth-wordpress.html","previous":{"fields":{"slug":"/2011/05/05/eclipse-cpp-setup.html"},"frontmatter":{"title":"Setting up Eclipse as your C/C++ environment"}},"next":{"fields":{"slug":"/2011/10/29/django-apache-modwsgi.html"},"frontmatter":{"title":"Setting up Apache Server for Django with mod_wsgi"}}}}