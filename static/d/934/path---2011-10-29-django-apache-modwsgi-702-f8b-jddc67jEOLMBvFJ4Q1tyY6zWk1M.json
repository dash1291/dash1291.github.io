{"data":{"site":{"siteMetadata":{"title":"Ashish Dubey's Blog","author":"Ashish Dubey"}},"markdownRemark":{"id":"a748139d-1f38-5440-8dbf-7564b8b7a289","excerpt":"Django is a very cool web development framework which comes with its own\nlightweight development server which is best for testing the application. But\nwhen it…","html":"<p>Django is a very cool web development framework which comes with its own\nlightweight development server which is best for testing the application. But\nwhen it comes to deploying the application for the outer world, more efficient\nand secure web server like Apache is preferred. Now, web developers who have\nbeen developing applications using PHP might find it very easy to deploy their\napplications on Apache(as they have easy configurable PHP module, or they\ncould just find a LAMP stack for if they were on Linux, so they would get\neverything cooked. But when it comes to combining python web frameworks like\nDjango with Apache, things turn out to be less obvious. My experience weren’t\nsmooth at all while trying to get my Django project work on Apache. And since\nI was trying to configure it with already installed LAMP stack on my Ubuntu\nsystem, things went really bad. Since, there are so many things integrated in\na compilation like LAMP stack, there are as many things which can go wrong\nwhile configuring Django on an Apache server. So, its recommended that a clean\nand separate Apache installation should be used so that things are easier to\ndiagnose one by one.</p>\n<h2>Step 1 - Install Apache HTTP Server</h2>\n<p>You should install a clean build of Apache in case you haven’t already. Its\neasy, just follow the docs given here <a href=\"http://httpd.apache.org/docs/2.2/install.html\">http://httpd.apache.org/docs/2.2/instal\nl.html</a></p>\n<h2>Step 2 - Install mod_wsgi</h2>\n<p>Now that you’re done with Apache, you need to install mod_wsgi which is a WSGI\nmodule for Apache. Know more about it here.\n<a href=\"http://code.google.com/p/modwsgi/\">http://code.google.com/p/modwsgi/</a></p>\n<p>Installation instructions <a href=\"http://code.google.com/p/modwsgi/wiki/InstallationOnLinux\">http://code.google.com/p/modwsgi/wiki/InstallationO\nnLinux</a> </p>\n<h2>Step 3 - Load and Configure mod_wsgi in Apache config</h2>\n<p>This is where you edit the Apache\nconfiguration file and tell Apache to load mod_wsgi module using the DSO\nmethod. You need to edit /conf/httpd.conf file and add the following directive\nto it</p>\n<pre class=\"apache\">\nLoadModule wsgi_module /usr/lib/apache2/modules/mod_wsgi.so\n</pre>\n<p>Also, at the end of the httpd.conf file, add the following directives</p>\n<pre class=\"apache\">\nWSGIScriptAlias / &lt;path-to-your-django-project&gt;/test.wsgi\n&lt;Directory path-to-your-django-project&gt;\nOrder deny,allow\nAllow from all\n&lt;/Directory&gt;\n</pre>\n<p>The first line in the above directives loads mod_wsgi module into the Apache\ninstance. The second directive <Directory> directive is there to make sure\nApache can access the directory given in the path. Also, make sure you replace\n<path-to-your-django-project> with its appropriate value.</p>\n<h2>Step 4 - Test WSGI</h2>\n<p>Now that we’ve configured Apache to load the mod_wsgi module, its time to test\nif it works. To do that, create a file <path-to-your-django-project>/test.wsgi\nwith the following content.</p>\n<pre class=\"python\">\ndef application(environ, start_response):\n\tstatus = '200 OK'\n\toutput = 'Hello World!'\n\tresponse_headers = [('Content-type', 'text/plain'),\n\t('Content-Length', str(len(output)))]\n\tstart_response(status, response_headers)\n\treturn [output]\n</pre>\n<p>Now test if it works by trying <a href=\"http://localhost\">http://localhost</a> in your browser, you should\nget Hello World for obvious reasons.(and yes make sure Apache is running)</p>\n<h2>Step 5 - Test the bad WSGI</h2>\n<p>Now, that the simple WSGI application runs, we need to test something which\ngenerally has issues which need to be resolved before moving on to using\nDjango as a WSGI application.</p>\n<h3><strong>The Expat woe</strong></h3>\n<p>When we move to more complicated WSGI applications, and as the applications\nstart using libraries whose versions conflict with the versions used by\nApache, there are issues like Apache crashing and incorrect response. One such\nlibrary is libexpat. Know more about it here <a href=\"http://expat.sourceforge.net/\">http://expat.sourceforge.net/</a>.</p>\n<p>It happens in many situations that the expat module used by python(that is the\ndefault one on a system) has a different version than that used by Apache(it\nhas its own). In such a situation, there is Segmentation Fault encountered by\nApache and it crashes. To test it if you encounter that issue, just make the\nfollowing entry in your test.wsgi file.</p>\n<pre class=\"python\">\nimport pyexpat\n</pre>\n<p>Now, again try <a href=\"http://localhost\">http://localhost</a>. If you get proper response as earlier then\nyou are free from the expat issue while if you get ‘no response’ error then\nyou need to resolve the expat issue before turning on to Django.</p>\n<h3><strong>Resolving Expat Issue</strong></h3>\n<p>There is this great post on handling expat issue. <a href=\"http://code.google.com/p/modwsgi/wiki/Issues%0AWithExpatLibrary\">http://code.google.com/p/mod\nwsgi/wiki/IssuesWithExpatLibrary</a>.</p>\n<p>Since, python’s expat module is hard to replace, its\nrecommended you change Apache’s expat module. Either update it or simply\nreplace it with your system’s expat. I consider replacing it. After all done,\nrestart Apache and test <a href=\"http://localhost\">http://localhost</a>, if all went good it should be\nworking fine.</p>\n<h2>Step 6 - Configure WSGI for Django</h2>\n<p>If you’ve successfully dealt with running WSGI with expat loaded, you should\nthen be able to run Django after a little bit of work if not-so-common issues\ndon’t fall in your way. For connecting to Django with mod_wsgi, you should\ncreate a new django.wsgi in the same directory as test.wsgi and set\nWSGIScriptAlias to that very file. Enter the following code to django.wsgi and\nyou’re on the go.</p>\n<pre class=\"python\">\nimport os\nimport sys\nroot = os.path.join(os.path.dirname(__file__),'..')\n\nsys.path.insert(0,root)\nos.environ['DJANGO_SETTINGS_MODULE']='&lt;your-project&gt;.settings'\n\nimport django.core.handlers.wsgi\napplication = django.core.handlers.wsgi.WSGIHandler()\n</pre>\n<p>Replace <code class=\"language-text\">&lt;your-project&gt;</code> with your project’s name. </p>\n<h2>Step 7 - Test Django</h2>\n<p>So you’ve worked out all the way to the point where you would need to test if all\nyour setup works fine. Its recommended that you use a clean Django application\nso that you don’t encounter issues related to database and other stuff.</p>","frontmatter":{"title":"Setting up Apache Server for Django with mod_wsgi","date":"October 29, 2011"}}},"pageContext":{"slug":"/2011/10/29/django-apache-modwsgi/","previous":{"fields":{"slug":"/2011/06/17/custom-auth-wordpress/"},"frontmatter":{"title":"Customized authentication for WordPress users"}},"next":{"fields":{"slug":"/2012/1/5/december-of-things/"},"frontmatter":{"title":"December of Things"}}}}